et-rust notes
=============

https://v2.tauri.app/start/
https://github.com/tauri-apps/plugins-workspace

Prompts:
I want to create a Rust app in Tauri using VS Code Dev Containers. Give me the instructions and files 
to initialize this project and test it with a simple graphical app.

I'm developing a Tauri project inside a VS Code Dev Container. I'm using the latest Tauri 2.4.1 and 
following the "Create a Project" tutorial. I selected Typescript for the front-end language, vanilla 
framework, npm as the package manager, Rust as the back-end language, and vite for the front-end 
tooling.


04/08/25 Grok startup:

Let’s set up a Rust app with Tauri using VS Code Dev Containers. This will involve creating a Dev Container configuration, initializing a Tauri project, and setting up a simple graphical app. Below are the step-by-step instructions and the necessary files.

### Step-by-Step Instructions

1. **Prerequisites**
   - Install [Docker](https://www.docker.com/get-started) on your system (required for Dev Containers).
   - Install [VS Code](https://code.visualstudio.com/) with the [Dev Containers extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers).
   - Ensure you have Git installed to clone or manage your project.

2. **Create Project Directory**
   - Open a terminal and create a new directory for your project:
     ```bash
     mkdir tauri-devcontainer-app
     cd tauri-devcontainer-app
     ```

3. **Set Up Dev Container Configuration**
   - Inside your project directory, create a `.devcontainer` folder:
     ```bash
     mkdir .devcontainer
     ```
   - Add the `devcontainer.json` and `Dockerfile` files (contents provided below) to this folder.

4. **Initialize the Tauri Project**
   - Once the Dev Container is running, you’ll initialize the Tauri app inside it. For now, we’ll set up the structure and provide the commands.

5. **Open in VS Code**
   - Open the project folder in VS Code:
     ```bash
     code .
     ```
   - Press `Ctrl+Shift+P` (or `Cmd+Shift+P` on Mac), select **Dev Containers: Reopen in Container**. VS Code will build the container based on your configuration.

6. **Install Tauri and Dependencies**
   - Inside the container’s terminal (VS Code will open one), run:
     ```bash
     cargo init
     npm create tauri-app@latest
     ```
   - Follow the prompts from the Tauri setup:
     - Choose `npm` as the package manager (or your preference).
     - Name your app (e.g., `tauri-app`).
     - Select `vanilla` (JavaScript/TypeScript with no framework) for simplicity.
   - After setup, navigate into the project folder:
     ```bash
     cd tauri-app
     ```

7. **Modify the App**
   - Edit the `src-tauri/src/main.rs` and `src/index.html` files (contents provided below) to create a simple graphical app with a button.

8. **Test the App**
   - In the terminal, run:
     ```bash
     npm run tauri dev
     ```
   - This will launch the Tauri development server and open a window with your app.

---

### Required Files

#### 1. `.devcontainer/devcontainer.json`
This file configures the Dev Container environment.

```json
{
  "name": "Tauri Rust Dev Container",
  "build": {
    "dockerfile": "Dockerfile",
    "context": ".."
  },
  "customizations": {
    "vscode": {
      "extensions": [
        "rust-lang.rust-analyzer",
        "tauri-apps.tauri-vscode",
        "esbenp.prettier-vscode"
      ]
    }
  },
  "features": {
    "ghcr.io/devcontainers/features/rust:1": {},
    "ghcr.io/devcontainers/features/node:1": {}
  },
  "postCreateCommand": "rustup update && npm install -g npm"
}
```

#### 2. `.devcontainer/Dockerfile`
This Dockerfile sets up the base environment for Tauri development.

```dockerfile
FROM mcr.microsoft.com/devcontainers/base:debian

# Install Tauri dependencies
RUN apt-get update && apt-get install -y \
    libwebkit2gtk-4.0-dev \
    build-essential \
    curl \
    wget \
    libssl-dev \
    libgtk-3-dev \
    libayatana-appindicator3-dev \
    librsvg2-dev \
    && rm -rf /var/lib/apt/lists/*
```

#### 3. `src-tauri/src/main.rs`
This is the Rust backend for your Tauri app. Replace the default content with this simple example.

```rust
#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

use tauri::Manager;

fn main() {
    tauri::Builder::default()
        .setup(|app| {
            let window = app.get_window("main").unwrap();
            window.set_title("Simple Tauri App")?;
            Ok(())
        })
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}
```

#### 4. `src/index.html`
This is the frontend HTML file. Replace the default content with this simple UI.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Tauri App</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
        }
        button {
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <button onclick="alert('Hello from Tauri!')">Click Me!</button>
</body>
</html>
```

#### 5. `Cargo.toml` (in `src-tauri/`)
This file will be auto-generated by `cargo init` and updated by Tauri. Ensure it includes these dependencies:

```toml
[package]
name = "tauri-app"
version = "0.1.0"
edition = "2021"

[dependencies]
tauri = { version = "1.0", features = ["api-all"] }

[build-dependencies]
tauri-build = { version = "1.0" }
```

#### 6. `package.json` (in `tauri-app/`)
This will be generated by `npm create tauri-app`. Ensure it has the Tauri scripts:

```json
{
  "name": "tauri-app",
  "version": "0.1.0",
  "scripts": {
    "tauri": "tauri",
    "tauri dev": "tauri dev",
    "tauri build": "tauri build"
  },
  "devDependencies": {
    "@tauri-apps/cli": "^1.0.0"
  }
}
```

---

### What to Expect
- When you run `npm run tauri dev`, a small window will appear with a "Click Me!" button centered on a light gray background.
- Clicking the button triggers a browser alert saying "Hello from Tauri!".

### Troubleshooting
- **Container Build Fails**: Ensure Docker is running and you have internet access for downloading dependencies.
- **Tauri Command Not Found**: Verify `@tauri-apps/cli` is installed (`npm install -g @tauri-apps/cli` if needed).
- **Window Doesn’t Open**: Check the terminal output for errors and ensure your `main.rs` and `index.html` match the provided code.

Let me know if you run into issues or want to expand the app further!

You should run the npm run tauri dev command inside the terminal of the VS Code Dev Container after setting up and opening your project in the container. Here's exactly where and how to do it:

Where to Run the Command
Open the Project in VS Code Dev Container
After following the earlier steps (creating the project, setting up the .devcontainer files, and running npm create tauri-app), open your project folder (tauri-devcontainer-app) in VS Code.
Use the command palette (Ctrl+Shift+P or Cmd+Shift+P on Mac) and select Dev Containers: Reopen in Container. This builds and starts the container.
Access the Terminal
Once the container is running, VS Code will automatically open a terminal within the container. You can find it at the bottom of the VS Code window in the "Terminal" panel.
If the terminal isn’t visible, go to the top menu: View > Terminal to open it.
Navigate to the Tauri App Directory
After running npm create tauri-app during setup, it creates a subdirectory (e.g., tauri-app) inside your project folder. In the terminal, navigate into this directory:
bash

Collapse

Wrap

Copy
cd tauri-app
You’re now in the correct directory where package.json (with the "tauri dev" script) is located.
Run the Command
In the terminal, type and execute:
bash

Collapse

Wrap

Copy
npm run tauri dev
This starts the Tauri development server, compiles the Rust backend, and opens your graphical app.
Notes
Why Inside the Container? The Dev Container has all the necessary tools (Rust, Node.js, Tauri dependencies) installed. Running the command outside the container (e.g., in your host system’s terminal) might fail if those dependencies aren’t set up locally.
Terminal Prompt: The terminal prompt might look something like /workspace/tauri-app $ (depending on your container setup), indicating you’re inside the container’s workspace.
First Run: The first time you run npm run tauri dev, it may take a minute to compile everything. Subsequent runs will be faster.
If the terminal isn’t showing or you’re unsure if you’re in the container, let me know, and I’ll guide you further!

04/09/25 Key commands
cargo init # Is this actually needed? It creates files that confuse the process
npm create tauri-app@latest # This should use the latest versions
cd tauri-app; npm run tauri dev
npm install -g @tauri-apps/cli ; tauri --version 2.4.1
npm install -g @tauri-apps/cli@latest
npx tauri info
npx tauri build
cargo search tauri-build # get versions
npm view <name> versions --json



Run npm create tauri-app@latest.
Select:
	Package manager: npm
	Framework: vanilla
	Language: JavaScript
The setup will generate a project with:
src/index.html (your frontend UI).
src-tauri/src/main.rs (your Rust backend).

tauri-cli: latest=2.4.1
window

devcontainer: "postCreateCommand": "rustup update && npm install -g npm && npm install -g @tauri-apps/cli@2.1.1"
# Check to see if tauri-apps/cli is needed
# Parses command-line arguments so it is probably not needed

04/10/25 Tauri Create a Project tutorial
https://tauri.app/start/create-project/
# Scaffold a new project
npm create tauri-app@latest
# Output
Make sure you have installed the prerequisites for your OS: https://tauri.app/start/prerequisites/, then run:
  cd tauri-app
  npm install
  npm run tauri android init

For Desktop development, run:
  npm run tauri dev

For Android development, run:
  npm run tauri android dev
 
# Start the development server
cd tauri-app
npm install
npm run tauri dev

# App compiles but does not display
> tauri-app@0.1.0 dev
> vite


  VITE v6.2.6  ready in 163 ms

  ➜  Local:   http://localhost:1420/
     Running DevCommand (`cargo  run --no-default-features --color always --`)
        Info Watching /workspaces/etc-rust/tauri-app/src-tauri for changes...
   Compiling tauri-app v0.1.0 (/workspaces/etc-rust/tauri-app/src-tauri)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 27.85s
     Running `target/debug/tauri-app`

(tauri-app:11693): dbind-WARNING **: 19:02:18.284: Couldn't connect to accessibility bus: Failed to connect to socket /run/user/1000/at-spi/bus_1: No such file or directory
Gtk-Message: 19:02:18.314: Failed to load module "canberra-gtk-module"
Gtk-Message: 19:02:18.317: Failed to load module "canberra-gtk-module"

# Alternative project creation - Manual Setup (Tauri CLI)
mkdir tauri-app
cd tauri-app
npm create vite@latest .
# Install Tauri CLI
npm install -D @tauri-apps/cli@latest
# Default Vite URL is: http://localhost:5173
npx tauri init
# Default options
✔ What is your app name? tauri-app
✔ What should the window title be? tauri-app
✔ Where are your web assets located? ..
✔ What is the url of your dev server? http://localhost:5173
✔ What is your frontend dev command? npm run dev
✔ What is your frontend build command? npm run build
# This will create src-tauri
# run it
npx tauri dev

    Finished `dev` profile [unoptimized + debuginfo] target(s) in 2m 46s
     Running `target/debug/app`

(app:15144): dbind-WARNING **: 19:16:09.044: Couldn't connect to accessibility bus: Failed to connect to socket /run/user/1000/at-spi/bus_1: No such file or directory
Gtk-Message: 19:16:09.072: Failed to load module "canberra-gtk-module"
Gtk-Message: 19:16:09.076: Failed to load module "canberra-gtk-module"

Grok:
Update Your Dockerfile
If you’re using a base image like debian or ubuntu, add the following dependencies to install GTK and WebKit2GTK (required by Tauri on Linux):

RUN apt-get update && apt-get install -y \
    libgtk-3-0 \
    libwebkit2gtk-4.0-37 \
    libayatana-appindicator3-1 \
    libcanberra-gtk3-module \
    dbus-x11 \
    && rm -rf /var/lib/apt/lists/*

# Trying dependencies
sudo apt update
sudo apt install -y dbus-xll
# I get an app window that says app not responding. Not a webpage
# libgtk-3-0 already installed
sudo apt install -y libwebkit2gtk-4.0-37
# Still hangs
# libayatana-appindicator3-1 already installed
sudo apt install -y libcanberra-gtk3-module

# Add runArgs to container and add the missing packages to Dockerfile
"runArgs": [
    "--env", "DISPLAY=${env:DISPLAY}",
    "--volume", "/tmp/.X11-unix:/tmp/.X11-unix"
]

# Works!
Opens a empty browser window and a tauri-app window

---

04/10/25 Customization
# Command for testing
npx tauri dev
# Command for deploying
npx tauri build
# Command for cargo refresh
cargo update

git clone --recursive git@github.com:clifjones/et-os-addons.git

---

04/11/25 Add ETC commands
I'm developing a Tauri project inside a VS Code Dev Container. I'm using the latest Tauri 2.4.1 and following the "Create a Project" tutorial. I selected Typescript for the front-end language, vanilla framework, npm as the package manager, Rust as the back-end language, and vite for the front-end tooling.
The back-end has the following source files:
main.rs:
// Prevents additional console window on Windows in release, DO NOT REMOVE!!
#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]


mod commands;

fn main() {
    tauri::Builder::default()
        .invoke_handler(tauri::generate_handler![commands::run_app])
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}

command.rs:
use tauri::command;
use std::process::Command;

#[command]
pub fn run_app(app_name: &str) -> Result<String, String> {
    let output = Command::new(app_name)
        .output()
        .map_err(|e| format!("Failed to execute {}: {}", app_name, e))?;

    let stdout = String::from_utf8_lossy(&output.stdout).into_owned();
    let stderr = String::from_utf8_lossy(&output.stderr).into_owned();

    if output.status.success() {
        Ok(stdout)
    } else {
        Err(stderr)
    }
}

and lib.rs:
pub mod commands;

Modify these source files to add the additional functionality:
1.  A function to read the string value from the file at $HOME/.config/emcomm-tools/et-mode
2.  A function to write a string value to the file at $HOME/.config/emcomm-tools/et-mode
3. A function to read the JSON object from the file at $HOME/.config/emcomm-tools/user.json
4.  A function to write the JSON object to the file at $HOME/.config/emcomm-tools/user.json
The JSON object for steps 3 and 4 above looks like this:
{
  "callsign": "N0CALL",
  "grid": "DM33",
  "winlinkPasswd": "NOPASS"
}

04/26/25 Ubuntu 22.04 compatible Tauri
https://github.com/tauri-apps/tauri-action

npm create tauri-app@latest -- --tauri-version 1

et-launcher git:(tauri-1) ✗ npm create tauri-app@latest -- --tauri-version 1
Need to install the following packages:
  create-tauri-app@4.5.9
Ok to proceed? (y) 
✔ Project name · et-launcher
✔ Identifier · com.jones-clan.et-launcher
✔ Choose which language to use for your frontend · TypeScript / JavaScript - (pnpm, yarn, npm, deno, bun)
✔ Choose your package manager · npm
✔ Choose your UI template · Vanilla
✔ Choose your UI flavor · TypeScript

Template created!

Your system is missing dependencies (or they do not exist in $PATH):
╭────────────────────┬─────────────────────────────────────────────────────────────────────────────────────╮
│ Rust               │ Visit https://www.rust-lang.org/learn/get-started#installing-rust                   │
├────────────────────┼─────────────────────────────────────────────────────────────────────────────────────┤
│ webkit2gtk & rsvg2 │ Visit https://v1.tauri.app/v1/guides/getting-started/prerequisites#setting-up-linux │
╰────────────────────┴─────────────────────────────────────────────────────────────────────────────────────╯

Make sure you have installed the prerequisites for your OS: https://v1.tauri.app/v1/guides/getting-started/prerequisites/, then run:
  cd et-launcher
  npm install
  npm run tauri dev

Dev Container Rebuild:
Ctrl+Shift+P Dev Containers: Rebuild Container

1. Official VS Code Dev Container Images
These are ready-to-go base images maintained by Microsoft. Examples:


Image Name	Purpose	Notes
mcr.microsoft.com/devcontainers/base:ubuntu-22.04	Basic Ubuntu 22.04	Small, minimal setup. Good if you want to control packages yourself.

GDK_SYNCHRONIZE=1 npm run tauri dev

Works on Ubuntu 22.10

# Install RepoMix
npm install -g repomix
# Initialize config
repomix --init
# package project
repomix

06/23/25 Fix shell exec
* Install mlterm
  sudo apt install mlterm

* Exec app from mlterm
  mlterm -e <command>

